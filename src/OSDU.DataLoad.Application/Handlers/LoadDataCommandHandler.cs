using MediatR;
using Microsoft.Extensions.Logging;
using OSDU.DataLoad.Application.Commands;
using OSDU.DataLoad.Application.Queries;
using OSDU.DataLoad.Domain.Entities;
using OSDU.DataLoad.Domain.Interfaces;

namespace OSDU.DataLoad.Application.Handlers;

/// <summary>
/// Handler for loading data from source path
/// </summary>
public class LoadDataCommandHandler : IRequestHandler<LoadDataCommand, LoadResult>
{
    private readonly IMediator _mediator;
    private readonly ILogger<LoadDataCommandHandler> _logger;

    public LoadDataCommandHandler(IMediator mediator, ILogger<LoadDataCommandHandler> logger)
    {
        _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<LoadResult> Handle(LoadDataCommand request, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Starting data load operation for {DataType} from {SourcePath}", 
            request.DataType, request.SourcePath);

        var startTime = DateTime.UtcNow;

        try
        {
            // Load directly from the pre-generated manifest directory
            // Manifests were already generated by GenerateManifestsCommand in Step 2
            return await _mediator.Send(new LoadFromManifestCommand 
            { 
                SourcePath = request.SourcePath,
                DataType = request.DataType,
                FileLocationMappings = request.FileLocationMappings
            }, cancellationToken);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during data load operation for {DataType}", request.DataType);
            return new LoadResult
            {
                IsSuccess = false,
                Message = $"Data load operation failed for {request.DataType}",
                ProcessedRecords = 0,
                SuccessfulRecords = 0,
                FailedRecords = 0,
                Duration = DateTime.UtcNow - startTime,
                ErrorDetails = ex.Message
            };
        }
    }
}
